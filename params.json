{"name":"jBinary","tagline":"High-level I/O for binary data.","body":"[![Build Status](https://travis-ci.org/jDataView/jBinary.png?branch=master)](https://travis-ci.org/jDataView/jBinary) [![NPM version](https://badge.fury.io/js/jbinary.png)](https://npmjs.org/package/jbinary)\r\njBinary - High-level I/O for binary data.\r\n=========================================\r\n\r\n<img src=\"https://avatars1.githubusercontent.com/u/4702384?s=130\" align=\"right\"></img>\r\n\r\njBinary makes it easy to work with binary files in JavaScript as with native objects via declarative syntax.\r\n\r\nIt works on top of [jDataView](https://github.com/jDataView/jDataView) (extended [DataView](http://www.khronos.org/registry/typedarray/specs/latest/#8) polyfill).\r\n\r\nWas inspired by [jParser](https://github.com/vjeux/jParser) and derived as new library with full set of I/O operations for manipulations on binary data in JavaScript.\r\n\r\n# How can I use it?\r\n\r\nTypical scenario:\r\n\r\n  * Describe [typeset](https://github.com/jDataView/jBinary/wiki/Typesets) with JavaScript-compatible declarative syntax (jBinary will do type caching for you).\r\n  * Create jBinary instance [from memory](https://github.com/jDataView/jBinary/wiki/jBinary-Constructor) or [from data source](https://github.com/jDataView/jBinary/wiki/Loading-and-saving-data) and your typeset.\r\n  * [Read/write](https://github.com/jDataView/jBinary/wiki/jBinary-Methods#readingwriting) data just as native JavaScript objects!\r\n\r\n# API documentation.\r\n\r\nCheck out [wiki](https://github.com/jDataView/jBinary/wiki) for detailed API documentation.\r\n\r\n# Is there any example code?\r\n\r\nSure, how about TAR archive modification:\r\n```javascript\r\n// configuring paths for Require.js\r\n// (you can use CommonJS (Component, Node.js) or simple script tags as well)\r\nrequire.config({\r\n  paths: {\r\n    jdataview: '//jdataview.github.io/dist/jdataview',\r\n    jbinary: '//jdataview.github.io/dist/jbinary',\r\n    TAR: '//jdataview.github.io/jBinary.Repo/typeSets/tar' // TAR archive typeset\r\n  }\r\n});\r\n\r\nrequire(['jbinary', 'TAR'], function (jBinary, TAR) {\r\n  // loading TAR archive with given typeset\r\n  jBinary.load('http://corsproxy.com/jdataview.github.io/jBinary.Repo/demo/tar/sample.tar', TAR)\r\n  .then(function (jb/* : jBinary */) {\r\n    // read everything using type aliased in TAR['jBinary.all']\r\n    var files = jb.readAll();\r\n\r\n    // do something with files in TAR archive (like log info and rename them to upper case)\r\n    files.forEach(function (file) {\r\n      console.log(file.name + ' (' + Math.round(file.size / 1024) + ' KB)');\r\n      file.name = file.name.toUpperCase();\r\n    });\r\n\r\n    jb.seek(0); // reusing same instance (and memory buffer) by resetting pointer\r\n    jb.writeAll(files); // writing entire content from files array\r\n    jb.saveAs('sample.new.tar'); // saving file under given name\r\n  });\r\n});\r\n```\r\n\r\n[Run](http://jsbin.com/gopekewi/1/) or [edit](http://jsbin.com/gopekewi/1/edit?js,console) it on JSBin.\r\n\r\n# What is already created?\r\n\r\nAdvanced demo that shows abilities and performance of jBinary - [Apple HTTP Live Streaming player](https://rreverser.github.io/mpegts/) which converts MPEG-TS video chunks from realtime stream to MP4 and plays them immediately one by one while converting few more chunks in background.\r\n\r\n[![Screenshot](http://rreverser.github.io/mpegts/screenshot.png?)](http://rreverser.github.io/mpegts/)\r\n\r\n---\r\n\r\nA [World of Warcraft Model Viewer](http://jdataview.github.io/jsWoWModelViewer/). It uses [jDataView](https://github.com/jDataView/jDataView)+[jBinary](https://github.com/jDataView/jBinary) to read the binary file and then WebGL to display it.\r\n\r\n[![Screenshot](http://jdataview.github.io/jsWoWModelViewer/images/modelviewer.png)](http://jdataview.github.io/jsWoWModelViewer/)\r\n\r\n---\r\n\r\nAlso check out [jBinary.Repo](https://jDataView.github.io/jBinary.Repo/) for advanced usage and demos of some popular file formats (and feel free to submit more!).\r\n\r\n# What license is it issued under?\r\n\r\nThis library is provided under [MIT license](https://raw.github.com/jDataView/jBinary/master/MIT-license.txt).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}